name: Continuous Integration

on: [push, pull_request]

jobs:
    test:
        runs-on: ${{ matrix.operating-system }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    # @see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
                    # @todo run some tests on 'windows-latest'
                    - php: '8.4'
                      operating-system: ubuntu-24.04
                    - php: '8.3'
                      operating-system: ubuntu-24.04
                    - php: '8.2'
                      operating-system: ubuntu-22.04
                    - php: '8.1'
                      operating-system: ubuntu-22.04

        steps:
            - run: echo "Job was automatically triggered by a ${{ github.event_name }} event"
            - run: echo "Job is now running on a ${{ runner.os }} server"
            - run: echo "Branch is ${{ github.ref }} and Repository is ${{ github.repository }}"
            - run: echo "Current directory is ${{ github.workspace }}, current user is $(id -u -n)"

            #- name: Install required packages
            #  run: |
            #    sudo apt-get -y install fonts-dejavu

            # has to be run before setting up the db and webserver, as we store their config files in the codebase
            - name: Check out repository code
              uses: actions/checkout@v3

            # @todo it probably makes sense to move all this shell scripting into dedicated files, rather than
            #       keeping it all inline. Besides clarity, we gain independence from GH actions...

            - name: Set up the Database
              # @todo we should set up a different version of mysql/mariadb for each matrix combination. Use Docker?
              # @see https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md#mysql
              # @see https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md#mysql
              run: |
                # Set up the config

                # Debugging
                #echo '### /etc/mysql/'
                #sudo ls -la /etc/mysql/
                #echo
                #echo '### /etc/mysql/debian-start'
                #sudo cat /etc/mysql/debian-start
                #echo
                #echo '### /etc/mysql/debian.cnf'
                #sudo cat /etc/mysql/debian.cnf
                #echo
                #echo '### /etc/mysql/my.cnf'
                #sudo cat /etc/mysql/my.cnf
                #echo
                #echo '### /etc/mysql/my.cnf.fallback'
                #sudo cat /etc/mysql/my.cnf.fallback
                #echo
                #echo '### /etc/mysql/mysql.cnf'
                #sudo cat /etc/mysql/mysql.cnf
                #echo
                #sudo ls -la /etc/mysql/conf.d/
                #echo
                #sudo ls -la /etc/mysql/mysql.conf.d/

                # Start the service
                sudo systemctl start mysql.service

            - name: Stop php-fpm if running
              run: |
                if ps auxwww | fgrep -q php-fpm; then
                    PHPVER=$(php -r 'echo implode(".",array_slice(explode(".",PHP_VERSION),0,2));' 2>/dev/null)
                    sudo service "php${PHPVER}-fpm" stop || sudo pkill php-fpm
                fi

            - name: Set up the required php version
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: bcmath, calendar, curl, ftp, gd, gettext, iconv, mbstring, mysqli, simplexml, sqlite3, xml, zip, zlib

            - name: Set up the Webserver
              # @todo we should set up either nginx or apache depending on the matrix combination
              run: |
                # Set up the config
                if [ -f /etc/apache2/sites-enabled/000-default.conf ]; then
                    sudo rm /etc/apache2/sites-enabled/000-default.conf
                fi
                if [ -f /etc/apache2/sites-available/000-default.conf ]; then
                    sudo rm /etc/apache2/sites-available/000-default.conf
                fi
                if [ -n "$(ls /etc/apache2/mods-enabled/php* 2>/dev/null)" ]; then
                    sudo rm /etc/apache2/mods-enabled/php*
                fi
                sudo cp ./tests/setup/config/apache2/000-default.conf /etc/apache2/sites-available/
                sudo sed -r -i -e 's|DocumentRoot /var/www/html|DocumentRoot ${{ github.workspace }}|' /etc/apache2/sites-available/000-default.conf
                sudo sed -r -i -e 's|<Directory "/var/www/html">|<Directory "${{ github.workspace }}">|' /etc/apache2/sites-available/000-default.conf
                sudo ln -s /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-enabled/000-default.conf

                sudo a2enmod proxy_fcgi
                sudo cp ./tests/setup/config/apache2/php_fpm_proxyfcgi.conf /etc/apache2/mods-available
                sudo ln -s /etc/apache2/mods-available/php_fpm_proxyfcgi.conf /etc/apache2/mods-enabled/php_fpm_proxyfcgi.conf
                PHPVER=$(php -r 'echo implode(".",array_slice(explode(".",PHP_VERSION),0,2));' 2>/dev/null)
                SOCKET=$(cat "/etc/php/$PHPVER/fpm/pool.d/www.conf" | grep -E '^listen *=' | sed -e 's/^listen *= *//')
                sudo sed -r -i -e "s|proxy:unix:/run/php/php-fpm.sock|proxy:unix:$SOCKET|" /etc/apache2/mods-available/php_fpm_proxyfcgi.conf

                # Debugging
                #echo '### /etc/apache2/'
                #sudo ls -la /etc/apache2/
                #echo
                #sudo cat /etc/apache2/*.conf
                #echo
                #sudo ls -la /etc/apache2/mods-enabled
                #sudo cat /etc/apache2/mods-enabled/*
                #echo
                #sudo ls -la /etc/apache2/conf-enabled
                #sudo cat /etc/apache2/conf-enabled/*
                #echo
                #sudo ls -la /etc/apache2/sites-enabled
                #sudo cat /etc/apache2/sites-enabled/*
                echo
                sudo cat /etc/apache2/mods-enabled/php_fpm_proxyfcgi.conf

                # Start the service
                sudo systemctl start apache2.service

            # Make sure Apache can access the installation in its current dir.
            # We set the installation to be fully writeable to anyone - this is a test install anyway
            # @todo the `/home/runner` path should not be hardcoded. Figure out if we can get if from some GH param
            - name: Fix filesystem permissions
              run: |
                sudo chmod g+rx,o+rx /home/
                sudo chmod -R g+rwX,o+rwX /home/runner/

            - name: Check syntax of php files
              run: |
                ./build/check_syntax.sh

            # @todo test loading of sql files, either manually or via the installer

            # @todo check that there are no security issues with composer deps (does github already do this for us?)

            # @todo run unit/functional tests
            #- name: Check web pages
            #  run: |
            #    curl -L --fail-with-body http://localhost/images/default_logo.jpg
            #    echo
            #    curl -L --fail-with-body http://localhost/index.php

            - name: Failure troubleshooting
              if: ${{ failure() }}
              run: |
                echo '### running processes'
                ps auxwww | grep -E -v '^root .+:[0-9]{2} \[' | grep -v ' grep'

                #echo '### fpm socket(s)'
                #ls -la /run/php/

                #sudo ls -la /var/log/apache2/
                #sudo cat /var/log/apache2/error.log
                echo
                echo '### apache access log'
                sudo cat /var/log/apache2/access.log
